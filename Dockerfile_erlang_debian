# syntax = docker/dockerfile:1.2
ARG os
ARG os_version
FROM $os:$os_version as builder
ARG os
ARG os_version

ENV DEBIAN_FRONTEND=noninteractive

# Don't clean up
RUN rm -f /etc/apt/apt.conf.d/docker-clean; echo 'Binary::apt::APT::Keep-Downloaded-Packages "true";' > /etc/apt/apt.conf.d/keep-cache

# Install Erlang/OTP dependencies
RUN --mount=type=cache,id=${os}_${os_version},target=/var/cache/apt,sharing=private \
    --mount=type=cache,id=${os}_${os_version},target=/var/lib/apt,sharing=private \
  apt-get --quiet update && apt-get --quiet --yes --no-install-recommends install \
  autoconf \
  build-essential \
  ca-certificates \
  $(apt-cache show default-jdk-headless >/dev/null 2>&1; \
    if [ $? -eq 0 ]; then \
      echo "default-jdk-headless"; \
    else \
      echo "default-jdk"; \
    fi) \
  devscripts \
  flex \
  git \
  libkrb5-dev \
  libncurses5 \
  libncurses5-dev \
  libsctp-dev \
  libssl-dev \
  $(apt-cache show libwxgtk3.0-gtk3-dev >/dev/null 2>&1; \
    if [ $? -eq 0 ]; then \
      echo "libwxgtk3.0-gtk3-dev libwxgtk-webview3.0-gtk3-dev"; \
    fi) \
  procps \
  unixodbc-dev \
  wget \
  xsltproc

# Build it
WORKDIR /tmp/build
ARG erlang_version
RUN wget --quiet https://github.com/erlang/otp/releases/download/OTP-${erlang_version}/otp_src_${erlang_version}.tar.gz
RUN tar xf otp_src_${erlang_version}.tar.gz
WORKDIR /tmp/build/otp_src_${erlang_version}
RUN if [ ! -f configure ]; then \
    ./otp_build autoconf; \
    fi
RUN eval "$(dpkg-buildflags --export=sh)" && \
  ./configure \
    --prefix=/usr \
    --enable-dirty-schedulers \
    --enable-dynamic-ssl-lib \
    --enable-kernel-poll \
    --enable-sctp \
    --with-java \
    --with-ssl

RUN make -j 2
RUN make docs DOC_TARGETS="chunks man"
RUN mkdir -p /tmp/install
RUN make DESTDIR=/tmp/install install
RUN make DESTDIR=/tmp/install install-docs DOC_TARGETS="chunks man"

# Install FPM dependencies
RUN --mount=type=cache,id=${os}_${os_version},target=/var/cache/apt,sharing=private \
    --mount=type=cache,id=${os}_${os_version},target=/var/lib/apt,sharing=private \
  apt-get --quiet update && apt-get --quiet --yes --no-install-recommends install \
  ruby \
  ruby-dev

# Install FPM
RUN if [ "${os}:${os_version}" = "ubuntu:trusty" ]; then \
    gem install json --no-rdoc --no-ri --version 2.2.0; \
    gem install ffi --no-rdoc --no-ri --version 1.9.25; \
    gem install fpm --no-rdoc --no-ri --version 1.11.0; \
    else \
    gem install fpm --no-document --version 1.12.0; \
    fi

# Package it
WORKDIR /tmp/output
ARG erlang_iteration
RUN fpm -s dir -t deb \
    --chdir /tmp/install \
    --name esl-erlang \
    --version ${erlang_version} \
    --package-name-suffix ${os_version} \
    --epoch 1 \
    --iteration ${erlang_iteration} \
    --package esl-erlang_VERSION-ITERATION~${os}~${os_version}_ARCH.deb \
    --maintainer "Erlang Solutions Ltd <support@erlang-solutions.com>" \
    --category interpreters \
    --description "Concurrent, real-time, distributed functional language" \
    --url "https://erlang-solutions.com" \
    --depends 'procps, libc6, libncurses5, libsctp1' \
    --depends $(apt-cache depends libssl-dev | grep Depends | grep -Eo 'libssl[0-9.]+') \
    --deb-recommends 'libwxbase2.8-0 | libwxbase3.0-0 | libwxbase3.0-0v5, libwxgtk2.8-0 | libwxgtk3.0-0 | libwxgtk3.0-0v5 | libwxgtk3.0-gtk3-0v5' \
    --deb-suggests 'default-jre-headless | java2-runtime-headless | java1-runtime-headless | java2-runtime | java1-runtime' \
    $(for pkg in erlang-base-hipe erlang-base erlang-dev erlang-appmon erlang-asn1 erlang-common-test erlang-corba erlang-crypto erlang-debugger erlang-dialyzer erlang-docbuilder erlang-edoc erlang-erl-docgen erlang-et erlang-eunit erlang-gs erlang-ic erlang-inets erlang-inviso erlang-megaco erlang-mnesia erlang-observer erlang-odbc erlang-os-mon erlang-parsetools erlang-percept erlang-pman erlang-public-key erlang-reltool erlang-runtime-tools erlang-snmp erlang-ssh erlang-ssl erlang-syntax-tools erlang-test-server erlang-toolbar erlang-tools erlang-tv erlang-typer erlang-webtool erlang-wx erlang-xmerl; do \
    echo "--conflicts $pkg"; \
    echo "--replaces $pkg"; \
    echo "--provides $pkg"; \
    done) \
    .

# Test it
RUN dpkg -i /tmp/output/*.deb
RUN if [ -f /usr/bin/hardening-check ]; then \
    hardening-check --nobindnow $(find /usr/lib/erlang -name erlexec); \
    fi
RUN erl -eval "ssl:start(), erlang:halt()."

# Export it
FROM scratch as exporting
COPY --from=builder /tmp/output /
